[{"tags":["help","man"],"_id":"5a6c8d40f02a345d46f0018e","title":"Worx - Let's begin!","description":"# <span style=\"color:#5c9aea\">Worx</span>\nThis is a straight-forward todo app by design. Node backend serving basic CRUD routes and a React front end making requests to the routes and then rendering components from the responses.\n\nHere are like **8,190,000** in (0.53 seconds)\n[1](https://scotch.io/tutorials/create-a-simple-to-do-app-with-react) --\n[2](https://medium.com/@aghh1504/1-simple-react-todo-list-52186b62976b) -- \n[3->33](http://todomvc.com/) --\n[8 mil +](https://www.google.com/search?q=todo+app+tutorial&ie=utf-8&oe=utf-8&client=firefox-b-ab)\n> These are the learning fodder for both front end and full stack and you could build one in about 30 minutes following along with a tutorial\n>\n\n# <span style=\"color:#5c9aea\"> ---------- </span><span style=\"color:#5c9aea\">Some stuff it does </span><span style=\"color:#5c9aea\"> ------------ </span>\n### Create and Update notes/projects\n> You can create a new note by holding down 'alt' + 'shift' + 'n'\n\n> Edit existing notes by clicking the Title in the upper left of each card\n\n### Searching tags\n- You can use regular expressions (regex) to search/filter by comma separated tags\n- By default, the searches are strict matches ({tags: {$all: [...]}}). You may preform an inclusive search of tags by starting your list with \"$in:\" (without the quotes)\n\n### Drafting Descriptions/Notes\nYou may use markdown to format your notes","createdAt":"2018-01-27T14:31:28.148Z","updatedAt":"2018-01-27T18:27:40.282Z","__v":0},{"tags":["nothing"],"_id":"5a6c8d98f02a345d46f0018f","title":"Task Title new","description":"    document.getElementById('main-form').classList.toggle('hidden')\n    document.getElementById('main-form').classList.toggle('no_margin')\n","createdAt":"2018-01-27T14:32:56.231Z","updatedAt":"2018-01-27T17:21:19.511Z","__v":0},{"tags":["medium","tutorial","personal","pug","draft"],"_id":"5a6c8faaf02a345d46f00193","title":"Old draft","description":"\n# **How (and why) am I wasting everyday?**\n<img src=\"https://github.com/bddowningjennings-dev/medium/raw/master/story-1%3A%20failing/matthew-henry-8824.jpg\" style=\"width: 100%\" alt=\"Photo by Matthew Henry on Unsplash\" />\n\n## An honest failure's blog\n\n\n### Blog Day 1: \n\nHow did I waste yet another day? I even had a trivial goal for today. Today I was going to save knowing everything for tomorrow and **focus** on a single, realistic and achievable goal. So, how exactly did I fail?\n\nI only wanted to set up a **basic** [RESTful] [API] on an [EC2] instance and [fetch] from the endpoints to interact with the data of a **simple** static site hosted on [GitHub Pages][gh-pages]. To put it **trivially**, I wanted to use an Ubuntu instance on an Amazon machine to serve routes associated to [mongoose]-registered models' contoller methods which enact the basic [CRUD] opperations on my [NoSQL] [mongoDB] database collections.\n\n**Easy.** Probably like, at most, ~4-5 hours to bust this out. Oh, plus I want to start writing [Medium] stories and tutorials and using [GitHub Gists] for a blog because my loose goal yesterday (after reading a few inspiring articles: [one] [two] [three]) was to create clever and impressive portfolio and personal blog sites so that recruiters for various top companies that would **soon** be fighting over me to **finally** view my projects and musings.\n\nI mean, going into this I know that I haven't had a ton of experience with EC2 or even GitHub Pages... But, I've recently set up a local [Node.js] server using [Express]. Heck, I even connected it to mongoDB using mongoose and set up all the models and controllers (one of each, actually) for adding \"Task\" documents for a to-do-list style task tracking app. Like, I'm waiting for top companies to start fighting over my developer skills and all.\n\n...\n[jargon]\n\n<!-- Photo by Matthew Henry on Unsplash -->\n\n<!-- notes -->\n<!--\nstart time: 4pm\ntalk about unsplash, yesterday, about me, documentation, copying, forgetting, assuming\n\n\n\n -->\n\n<!-- useful links -->\n<!-- [fetch] -->\n<!-- [CRUD] -->\n<!-- [NoSQL] -->\n[jargon]: http://jargon.js.org/\n[mongoose]: http://mongoosejs.com/\n[Express]: https://expressjs.com/\n[Node.js]: https://nodejs.org/en/\n[mongoDB]: https://www.mongodb.com/\n[gh-pages]: https://pages.github.com/\n[EC2]: https://aws.amazon.com/ec2/\n[RESTful]: https://restfulapi.net/\n[API]: https://medium.freecodecamp.org/what-is-an-api-in-english-please-b880a3214a82","createdAt":"2018-01-27T14:41:46.010Z","updatedAt":"2018-01-27T18:29:44.667Z","__v":0},{"tags":["gist","yogendrakunwar"],"_id":"5a6ca55450e56d3f29659137","title":"Gist - yogendrakunwar","description":"# security\n\n##学習　したこと　（summary)\n\nセキュリティ　と　言えば　サイバーセキュリティやITセキュリティとして知られているコンピュータのセキュリティは、ハードウェア、ソフトウェアの盗難や損傷から\n情報システムの保護であり、それらの情報にだけでなく、彼らが提供するサービスの中断や誤った方向から。それは意図的な、\nまたはによるそれらへの偶発がだまされているかどうかを、オペレータが、による医療過誤に、ハードウェアへの物理的なアクセスを制御するだけでなく、ネットワーク・\nアクセス、データやコードインジェクション経由で来るかもしれない害から守る含み安全な手順から逸脱する。\n\nフィールドが原因で多くの社会におけるコンピュータシステムの増加依存に重要性を増している コンピュータシステムは\n現在、モノのインターネットの一部としてスマートフォン、テレビ、小型のデバイスを含む「スマート」デバイスの非常に多種多様があります。 そしてネットワークは、インターネットとプライベートデータネットワークだけでなく、ブルートゥース、Wi-Fiと他のワイヤレスネットワークだけでなく、含まれています。\nmalware が色々あって　ウイルス、トロザン、とか、ウイルス　かかった場合は　まず　 ネット切ってanti malware window updates　とか　アクロバット\nザバ　ダウンロード　する　事。passwordが　難しい　して　みんなに　見せないようにする。\n　\n\n\n\n　　ネットワーク\n\nインターネットセキュリティは、コンピュータセキュリティの分岐は特に、多くの場合、ブラウザのセキュリティを伴うだけでなく、それは全体的に他のアプリケーションやオペレーティングシステムに適用される、より一般的なレベルのセキュリティを、ネットワーク、インターネットに関連しています。その目的は、インターネットを介した攻撃を使用するルールや対策を確立することである。インターネットはフィッシングなどの侵入や不正行為のリスクが高いにつながる情報を交換するための安全でないチャネルを表します。様々な方法が使用されています暗号化とから、グランドアップエンジニアリングを含むデータの転送を保護します。\n\nハードウェア\n\nコンピュータのハードウェア（コンピューティングコンテキストが懸念しているとき、通常は単にハードウェアと呼ばれる）は、コンピュータシステムを構成する物理的要素の集まりです。コンピュータハードウェアは、その全てが、というように、モニタ、マウス、キーボード、記憶装置、ハードディスクドライブ（HDD）、グラフィックカード、サウンドカード、メモリ、マザーボードなどのコンピュータの物理的な部品または構成要素であり、そして有形ある物理オブジェクト。対照的に、ソフトウェアが格納され、ハードウェアにより実行可能な命令です。ソフトウェアは、特定の動作を実行するためにコンピュータのプロセッサに指示する\n機械可読命令のセットです。ハードウェアとソフトウェアの組み合わせは、使用可能なコンピューティングシステムを構成します。\n\nパーソナルコンピュータ\n\nモニター、マザーボード、CPU、RAM、2つの拡張カード、電源装置、光ディスクドライブ、ハードディスクドライブ、キーボードやマウスなどの現代のパーソナルコンピュータの基本的なハードウェアコンポーネント。\n\n\nメインボード\n主要な記事：マザーボード\nマザーボードは、コンピュータの主要なコンポーネントです。これは、ポートまたはを介して接続されたCPU、RAM、ディスクドライブ（CD、DVD、ハードディスク、または他のもの）を含む、コンピュータ　です。\n\n[Link to Gist](https://gist.github.com/yogendrakunwar/a57f69bdc4816bd07fce)","createdAt":"2018-01-27T16:14:12.045Z","updatedAt":"2018-01-27T17:12:00.891Z","__v":0},{"tags":["gist","github","progress bar","css"],"_id":"5a6ca66650e56d3f29659138","title":"Long Gist - andrewhathaway","description":"## How to write a cool CSS3 progress bar\n\nI was set the task to write a progress bar at work recently, and I couldn't really think of a way to do it at first. After a while I came up with [this](http://dribbble.com/shots/718169-CSS3-Progressbar?list=following). I'm going to show you how to write one and if you want to see a demo there is one [here](http://codepen.io/AndrewHathaway/pen/vmuFk). We will start with a basic progress bar and extend it as we go on.\n\nThe way I did this is pretty simple to be honest. I started off with a div. This acts as your outer 'container' which you set to the width of your choice. \n\n### HTML\n\t<div class=\"meter\"></div>\n\n## CSS\n\tdiv.meter {\n\t\tposition: relative;\n\t\twidth: 250px;\n\t\theight: 25px;\n\t\tborder: 1px solid #b0b0b0;\n\n\t\t-webkit-box-shadow: inset 0 3px 5px 0 #d3d0d0;\n\t\t   -moz-box-shadow: inset 0 3px 5px 0 #d3d0d0;\n\t\t        box-shadow: inset 0 3px 5px 0 #d3d0d0;\n\n\t\t-webkit-border-radius: 3px;\n\t\t   -moz-border-radius: 3px;\n\t\t    -ms-border-radius: 3px;\n\t\t     -o-border-radius: 3px;\n\t\t        border-radius: 3px;\n\t}\n\n## What does this do?\nThe position relative is used later so we can position some items inside the meter to absolute and not have them fly to the top of the page. The height and width are both entirely up to you, they just seem like a nice size for a progress bar. Onto the border, I will be keeping the borders at 1px throughout to make it match up, otherwise things wont \"fit in\". Next is some CSS3. Box-shadow makes things look pretty. It also makes the bar look slightly rounded, adds character. Or is that just me? The border radius property makes corners round, again making things pretty. These will not work in IE9 or less but your bar will still be functional.\n\nNext to create the bar itself. \n\n## HTML - Continued\n\t<div class=\"meter\">\n   \t\t<span style=\"width: 50%\"></span>\n\t</div>\n\nI use the span for the bar. Above I've also used some in line CSS, I'm sorry. It's just a nice way to do things and data attributes did not seem to work for me. Using this in line CSS you can then just echo your data from PHP after working out a percentage. This will then fill the bar to the percentage suitable for the bar.\n\n## CSS\n\tdiv.meter span {\n\t\tdisplay: block;\n\t\theight: 100%;\n\t\tposition: relative;\n\t\ttop: -1px;\n\t\tleft: -1px;\n\n\t\tborder: 1px solid #3c84ad;\n\n\t\t-webkit-border-radius: 3px;\n\t\t   -moz-border-radius: 3px;\n\t\t    -ms-border-radius: 3px;\n\t\t     -o-border-radius: 3px;\n\t\t        border-radius: 3px;\n\n\t\twebkit-box-shadow: inset 0px 3px 5px 0 rgba(0, 0, 0, 0.2);\n\t\t  -moz-box-shadow: inset 0px 3px 5px 0 rgba(0, 0, 0, 0.2);\n\t\t       box-shadow: inset 0px 3px 5px 0 rgba(0, 0, 0, 0.2);\n\n\t\tbackground: #6eb2d1; \n\t}\n\n## Let's go through it.\nAt the start we have some sizing properties to deal with how the span fits within the container. As it's a \"text element\" we use display: block; so we can treat it like a div, as such. The height is set to 100% to fill the container. We then use position: relative; which allows us to position the element how we want. In this case we want the border of the span to go over the border of the container so we move the span back a pixel for the left and top.\n\nAs the container has a border radius of 3px, we don't want our bar to be squared so we match the border radius of the container for the span. Next up, the shadow. Adding a better feel to the element again. Makes it look a bit rounded, I think.\n\nThen all we need to do is set the colour of the bar by adding the background property.\n\n## Gradient bar\n\n\nThe above CSS creates a background-image over the colour specified as the background in the CSS before. This background image goes from transparent to a darkened version of the colour behind by using RGBA(). This is a very simple gradient, from one colour to another spreading the whole width. This is done by having only 2 colour stops. 0% and 100%. This means that from 0% to 100% the colour will gradually get darker (from transparent to rgba(0, 0, 0, .2)). \n\n## Candy Striping\n\nYeah gradients are cool, but we can apply gradients to a further extent to create \"Candy Striping\". Let's see how its done.\n\n\t-webkit-background-size: 45px 45px;\n\t   -moz-background-size: 45px 45px;\n\t     -o-background-size: 45px 45px;\n\t        background-size: 45px 45px;\n\nThis is where the cool bit comes in. We need to keep the background property from the original CSS. This is because we overlay lighter and darker colours on top of it to add stripes.\n\nUsing \"45deg\" it rotates the gradient so the stripes are not sideways. You can also use \"-45deg\" to have the stripes facing the other way. Color-stop() is a feature allowing you to stop or start a colour at a point given. color-stop() works in percentages, in this case every 25%. The gradient above has a stripe every 25% by stopping one colour and starting another. One stripe is completely transparent, so the background: #6eb2d1; we set before this chain is shown. The next stripe uses RGBA() to lighten the colour #6eb2d1. rgb(255, 255, 255) is white. Changing this to rgba(255, 255, 255, .2) makes the white have the opacity of 20%, lightening the colour behind it! Note that \"linear-gradient\" does not require the color-stop() function, but it is the same process with the seperate colours and percentages there. Each colour stop is specified by colour, then the percentage of which to start or stop and then they are seperate by commas.\n\nWe then simply set the background size to set the size of the stripes. Although, this has to be tuned because the stripes sometimes start to not match up.\n\nSo we now have quite a cool looking progress bar. It's candy striped, it works in percentages and is easily updateable to go with your data. However, we can start to go even further!\n\n## Extending the progress bar\nIf you looked at my example of what I wrote at the start of this post, you might have noticed it has a line through the middle, adding even more detail to the progress bar. This is something really simple to do. To do this we could use an extra div inside of the span but I like to use pseudo elements which are amazing! The HTML does not change, so lets extend this CSS.\n\n\tdiv.meter span:before {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\theight: 50%;\n\t\tposition: relative;\n\t\ttop: 50%;\n\t\tbackground: rgba(0, 0, 0, 0.03);\n\t}\n\nLets run through. Pseudo elements wont appear without a content property, it's how it goes. We can just leave this one blank for now as we don't want any text displaying. Again we need to make it display: block; so we can add width and height properties, which I set to the full width of the bar and half of the height of the bar. I then used the top property to bump it down to the bottom. The background I then made darker by 2%, to create the line.\n\nNow, why don't we notify the user of what percentage it actually is? Except, I want to keep it in the progress bar and not to the side of it.\n\n## HTML - continued\n\t<div class=\"meter\">\n\t\t<span style=\"width:72%\"></span>\n\t\t<p>72%</p>\n\t</div>\n\nJust add a paragraph tag in the meter div but not in the span. Now for the CSS.\n\n\tp {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tmargin: 0 10px;\n\t\tline-height: 25px;\n\n\t\tfont-family: 'Helvetica';\n\t\tfont-weight: bold;\n\t\t-webkit-font-smoothing: antialised;\n\t\tfont-size: 15px;\n\t\tcolor: #333;\n\t\ttext-shadow: 0 1px rgba(255, 255, 255, .6);\n\t}\n\nJust some basic CSS for text styling. I had a few issues with getting the text to align and sit properly so this is what I did. position to absolute, allowing us to set property top to 0. Then remove the margin from the paragraph, which hopefully will have been removed previously from a CSS reset and then line-height to the height of the progress bar. I also set a left margin of 10px to give the text space between the sides.\n\nI then used some simple CSS to style the text in a reasonable way with a text shadow to make it pretty.\n\nNow, this is where it gets even cooler. CSS3 animation. \"On load\" as such, we can make it grow. Now, I don't know about you, but animated elements make me happy, smoothing everything down! Luckily, it doesn't even take much code!\n\n## What we add\n\t@keyframes grower {\n\t\t0% { width: 0%; }\n\t}\n\n\t/* Firefox */\n\t@-moz-keyframes grower {\n\t\t0% { width: 0%; }\n\t}\n\n\t/* Safari and Chrome */\n\t@-webkit-keyframes grower {\n\t\t0% { width: 0%; }\n\t}\n\n\t/* Opera */\n\t@-o-keyframes grower {\n\t\t0% { width: 0%; }\n\t}\n\nWe add this anywhere in the CSS file, this is our animation, our 'frames'. Repeated a few times for our vendor prefixes, so other browsers support this animation. We give our animation a name, \"grower\" I called it. This makes it so our animation will start at width: 0%; and end at the width we gave it previously from the in line CSS of the span. This is not all, we need to tell our span to run this animation. Simples! Add the following CSS to your your span.\n\n\t-webkit-animation: grower 1s linear; \n\t   -moz-animation: grower 1s linear;\n\t     -o-animation: grower 1s linear;\n\t        animation: grower 1s linear;\n\nAgain we add a few lines of the same code but changed slightly for browser support. We then call the animation, this is the name we gave it above. Set a time for how long it occurs for and then give it an animation timing. Now, I'm not the best to ask about animation timings but linear keeps it at the same speed all the way through the animation, making it smooth. It may seem more realistic to have it change speeds if you're faking to load something, but in this case It's smooth.\n\nNow, I know the title says CSS3 but why not go add some jQuery along with it. I want the current percentage to update as the bar loads, and keep in time. Now, I'm not too great with JS/jQuery but this worked.\n\t\n\t//Store some variables\n\tvar bar = $('span');\n\tvar p = $('p');\n\n\t//Get the width we want and remove the percentage sign\n\tvar width = bar.attr('style');\n\twidth = width.replace(\"width:\", \"\");\n\twidth = width.substr(0, width.length-1);\n\n\t//Variables for the loop\n\tvar interval;\n\tvar start = 0; \n\tvar end = parseInt(width);\n\tvar current = start;\n\n\t//The countUp function to update our paragraph tag.\n\tvar countUp = function() {\n\t  current++;\n\t  p.html(current + \"%\");\n\t  \n\t  if (current === end) {\n\t    clearInterval(interval);\n\t  }\n\t};\n\t\n\t//Run the function 72 times in a second.\n\tinterval = setInterval(countUp, (1000 / (end + 1)));\n\nWe start off my putting the elements we need into a variable, this is just what I've been taught to do for caching, it's also just nicer to deal with when it comes to 'acting' on them. \n\nI then had a bit off a fuss getting the width we want for the variable \"end\" as the CSS as the animation was setting it to 0. However I got it by getting the style attribute from the span, removing \"width:\" and then using substr() to remove the percentage sign from the end. This will only work if you have just width in the style attribute, which it should be. Inline CSS is naughty!\n\nThe next bit makes the paragraph count up, it also keeps in time with the CSS animation. I set up some variables up that we need during the function. Variable start is what number to start counting from, and end is what number to stop at. \n\nI had to convert the width variable to a Integer (int) otherwise it won't stop counting! the countUp() function just increments the current variable and sets the paragraphs text to the number suitable.\n\nThe if check is used to stop the counting when it hits that magic number (variable end). Then all we need to do is use setInterval() to make the function countUp() run 72 times in a second. 1000 ms is equal to one second, but we need to run this function 72 times in one second, so we do some basic maths to work out when to run it. One more thing, if you're using this jQuery script you can remove the percentage value from the paragraph and it will still work.\n\nSo there you have it. A cool, completely customisable yet useable progress bar ready for your website, or WebApp!\nHope you enjoyed reading this tutorial. If you have any questions be sure to [send me a tweet!](https://twitter.com/andrewhathaway)\n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n[Gist-link](https://gist.github.com/andrewhathaway/3725561)","createdAt":"2018-01-27T16:18:46.735Z","updatedAt":"2018-01-27T16:33:40.415Z","__v":0},{"tags":["node.js","express","mongoose","mongodb","nginx","pm2","ssh","aws","backend"],"_id":"5a6cb83e50e56d3f2965913a","title":"Hosting your backend on and an AWS EC2 instance","description":"# Tutorials:\n\n- Medium - [Setting Up An HTTPS Server With Node, Amazon EC2, NGINX And Let’s Encrypt](https://blog.cloudboost.io/setting-up-an-https-sever-with-node-amazon-ec2-nginx-and-lets-encrypt-46f869159469) -\n\n> This one has steps for HTTPS (will need to know this to allow gh-pages to make ajax requests (but you've got to buy a domain :( )... review Let'sEncrypt more!)\n\n# Docs/White papers:\n- [nginx](https://www.nginx.com/resources/admin-guide/reverse-proxy/) - \n\n> This article describes the basic configuration of a proxy server. You will learn how to pass a request from NGINX to proxied servers over different protocols, modify client request headers that are sent to the proxied server, and configure buffering of responses coming from the proxied servers.\n\n- Let's Encrypt - [Getting started](https://letsencrypt.org/getting-started/) -\n\n> Certbot ACME client. It can automate certificate issuance ","createdAt":"2018-01-27T17:34:54.255Z","updatedAt":"2018-01-27T17:52:09.294Z","__v":0},{"tags":["bob","frank","pizza"],"_id":"5a6cc50c50e56d3f2965913b","title":"Bob's Card","description":"![pizza](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQyE-yQ_t2D2PEOh5HHH4i79cww1qMlSGbMy5duwbcyMJxog-ENNA)\n![more pizza](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSmYfdJKI9c5VjlsFEZBJ6JrGKiOqEO88LTMaV8NGN-AdAZ15g0)\n![more pizza](https://media.giphy.com/media/1108D2tVaUN3eo/giphy.gif)\n![more pizza](http://smhttp.64097.nexcesscdn.net/80544EA/dfcontent/wp-content/uploads/2012/06/pizza_faces1.jpg)\n![more pizza](https://i.pinimg.com/736x/eb/dd/a0/ebdda0fa435137229b6d11c8a928599c--pizza-life-pizza-stuff.jpg)","createdAt":"2018-01-27T18:29:32.071Z","updatedAt":"2018-01-27T18:35:24.384Z","__v":0}]